@page "/category"
@using Computer_Store_Common
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = SD.Role_admin)]

<_DeleteConfirmation IsParentComponentProcessing='IsLoading' ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6 card-title text-primary">Category</div>
    <div class="col-4 offset-2">
        <a href="category/create" class="btn btn-primary form-control">Add New Category</a>
    </div>
    <div class="col-12">
        @if (Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var cat in Categories)
                    {
                        <tr>
                            <td>@cat.Name</td>
                            <td>
                                <NavLink href="@($"category/edit/{cat.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(cat.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //Loading Gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                //no Records in database
                <p>NO Records Found</p>
            }
        }
    </div>
</div>

@code {
    public IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    public bool IsLoading { get; set; }
    public int DeleteCategoryId { get; set; } = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           await  LoadCategories();
        }
    }
    private async Task LoadCategories()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteCategoryId != 0)
        {
            // Delete
            await _categoryRepository.Delete(DeleteCategoryId);
            await LoadCategories();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
