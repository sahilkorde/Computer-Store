@page "/product"
@using Computer_Store_Common;
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUPload
@inject NavigationManager _navigationManager

<_DeleteConfirmation IsParentComponentProcessing='IsLoading' ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6 card-title text-primary">Product</div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
    <div class="col-12">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorite</th>
                        <th>Customer Favorite</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var prod in Products)
                    {
                        <tr>
                            <td>@prod.Name</td>
                            <td>
                                <input type="checkbox" disabled checked="@prod.ShopFavorite" class="form-check-input">
                            </td>
                            <td>
                                <input type="checkbox" disabled checked="@prod.CostomerFavorite" class="form-check-input">
                            </td>
                            <td>
                                @prod.Category.Name
                            </td>
                            <td>
                                <NavLink href="@($"product/edit/{prod.Id}")" class="btn btn-primary">Edit</NavLink>
                                <NavLink href="@($"product/price/{prod.Id}")" class="btn btn-success">Price</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(prod.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //Loading Gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                //no Records in database
                <p>NO Records Found</p>
            }
        }
    </div>
</div>

@code {
    public IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    public int DeleteProductId { get; set; } = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
        else
        {
            if (!authState.User.IsInRole(SD.Role_admin))
            {
                _navigationManager.NavigateTo("/ErroPage");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await  LoadProducts();
        }
    }
    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.getAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if(isConfirmed && DeleteProductId != 0)
        {
            // Delete
            ProductDTO product = await _productRepository.get(DeleteProductId);
            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUPload.DeleteFile(product.ImageUrl);
            }
            await _productRepository.delete(DeleteProductId);
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }
}
