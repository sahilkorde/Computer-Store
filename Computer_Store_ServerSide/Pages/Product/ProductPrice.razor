@page "/product/price/{id:int}"
@inject IProductRepository _productRepository;
@inject IProductPriceRepository _productPriceRepository;
@attribute [Authorize]

<h3 class="card-title text-primary mb-3 m-3">Product Price Management</h3>
@if (IsLoading)
{
    <div class="text-center">
        <img src="/Images/loading.gif">
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-8">
            <div class="card-body">
                <h4>@product.Name</h4>
                <span>Category : @product.Category.Name </span><br>
                <span>Description : @((MarkupString)product.Description)</span>
            </div>
        </div>
        <div class="col-4">
            <img src="@product.ImageUrl" class="w-100">
        </div>
    </div>
    <SfGrid @ref="productPirceGrid" DataSource="@productprices" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems">
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDTO"></GridEvents>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridSearchSettings></GridSearchSettings>

        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(ProductPriceDTO.Id) HeaderText="Id"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Varient) HeaderText="Varient"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Price) HeaderText="Price" Format="C2"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions(){ IconCss="e-icons e-edit",CssClass="e-flat"})"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions(){ IconCss="e-icons e-delete",CssClass="e-flat"})"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions(){ IconCss="e-icons e-update",CssClass="e-flat"})"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions(){ IconCss="e-icons e-cancel-icon",CssClass="e-flat"})"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
        
    </SfGrid>
}

@code {
    [Parameter]
    public int id { get; set; }
    public ProductDTO product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> productprices { get; set; } = new List<ProductPriceDTO>();
    private bool IsLoading { get; set; } = true;
    public SfGrid<ProductPriceDTO> productPirceGrid;
    private List<string> ToolbarItems = new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            product = await _productRepository.get(id);
            productprices = await _productPriceRepository.GetAll(id);
            IsLoading = false;
            StateHasChanged();
        }
    }
    public async void ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = id;
            if(args.Action == "Add")
            {
                //create
                await _productPriceRepository.Create(args.Data);
                productprices = await _productPriceRepository.GetAll(id);
                productPirceGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                //Edit
                //args.Data.ProductId = id;
                await _productPriceRepository.Update(args.Data);
                productPirceGrid.Refresh();

            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(args.Data.Id);
            productPirceGrid.Refresh();
        }
    }
}