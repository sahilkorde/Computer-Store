@page "/product/create"
@page "/product/edit/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IFileUpload _fileupload;
@inject NavigationManager _navigationManager
@inject IJSRuntime _JsRuntime
<div class="row my-2">
    <h3 class="cardcard-title text-primary mb-3 ml-3">Create Product</h3>
    <div class="col-10">

        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/loading.gif">
            </div>
        }
        else
        {
        <EditForm Model="Product" OnValidSubmit="UpsertProduct">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="from-goup">
                <label>Name</label>
                <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                <ValidationMessage For="()=>Product.Name"></ValidationMessage>
            </div>
            <div class="from-goup">
                <label>Main Features</label>
                <InputTextArea @bind-Value="Product.MainFeature" class="form-control"></InputTextArea>
                <ValidationMessage For="()=>Product.MainFeature"></ValidationMessage>
            </div>
            <div class="from-goup">
                <label>Description</label>
                    <SfRichTextEditor @bind-Value="Product.Description" class="form-control">
                    </SfRichTextEditor>
                <ValidationMessage For="()=>Product.Description"></ValidationMessage>
            </div>

            <div class="row pt-3">
                <div class="form-group col-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="Product.ShopFavorite" class="form-check-input"></InputCheckbox>
                        <label class="form-check-label">Is Shop Favorite</label>
                    </div>
                </div>
                <div class="form-group col-6">
                    <div class="form-check">
                        <InputCheckbox @bind-Value="Product.CostomerFavorite" class="form-check-input"></InputCheckbox>
                        <label class="form-check-label">Is Customer Favorite</label>
                    </div>
                </div>
            </div>
            <div class="from-goup col-6">
                <label>Category</label>
                <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                    <option value="0" disabled='disabled' selected>--Select Category</option>
                        @foreach(var cat in Categories)
                        {
                            <option value="@cat.Id">@cat.Name</option>
                        }
                </InputSelect>
                <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
            </div>
            <div class="form-group col-6">
                <InputFile OnChange="HandleImageUpload"></InputFile>
            </div>

            <div class="form-group p-2">
                <button class="btn btn-primary">@Title</button>
                <NavLink href="product" class="btn btn-secondary">Back to Index</NavLink>
            </div>
        </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100" /> 
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/Images/default.png"
    };
    public IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";

    private string OldImageUrl { get; set; }

    public bool IsLoading { get; set; } = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }
    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();
        if (Id != 0)
        {
            //update
            Title = "Update";
            Product = await _productRepository.get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }

    public async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            //create
            await _productRepository.create(Product);
            await _JsRuntime.ToastrSuccess("Product created Successfully");
        }
        else
        {
            //update
            if(OldImageUrl != Product.ImageUrl)
            {
                _fileupload.DeleteFile(OldImageUrl);
            }
            await _productRepository.update(Product);
            await _JsRuntime.ToastrSuccess("Product Update successfully");
        }
        _navigationManager.NavigateTo("product");    
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg" ){
                        Product.ImageUrl = await _fileupload.UploadFile(file);
                    }
                    else
                    {
                        await _JsRuntime.ToastrError("Please Select .jpeg/.jpg/.png file only");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch(Exception ex)
        {
            await _JsRuntime.ToastrError(ex.Message);
        }
    }
}
