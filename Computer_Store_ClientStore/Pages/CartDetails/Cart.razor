@page "/cart"
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject ICartService _cartService
@if (IsProcessing)
{
    <div class="text-center">
        <img src="/Images/loader.gif" />
    </div>
}
else
{
    <section class="h-100 gradient-custom">
        <div class="container py-5">
            @if (!ShoppingCart.Any())
            {
                <div>
                    Please Add Item To shopping CArt
                </div>
            }
            else
            {
                <div class="row d-flex justify-content-center my-4">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-header py-3">
                                <h5 class="mb-0">Cart - @ShoppingCart.Count items</h5>
                            </div>
                            @foreach (var item in ShoppingCart)
                            {
                                <div class="card-body">
                                    <!-- Single item -->
                                    <div class="row">
                                        <div class="col-lg-3 col-md-12 mb-lg-0 text-center">
                                            <img class="img-fluid img-responsive shadow-lg" src="@item.Product.ImageUrl" style="max-height:15vh;  margin: auto;">
                                        </div>

                                        <div class="col-lg-5 col-md-6 mb-4 mb-lg-0">
                                            <!-- Data -->
                                            <p><strong>@item.Product.Name -  @item.ProductPirce.Varient</strong></p>
                                            <p></p>
                                            <p class="badge bg-dark"> @item.Product.Category.Name</p>
                                            <!-- Data -->
                                        </div>

                                        <div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
                                            <!-- Quantity -->
                                            <div class=" mb-2" style="max-width: 300px">
                                                <button class="btn btn-primary" @onclick="()=>Decreament(item.ProductId, item.ProductPriceId, 1)">
                                                    <i class="bi bi-dash-circle-fill"></i>
                                                </button>

                                                <div class="mx-0 btn bg-opacity-25 bg-secondary fw-bold justify-content-center">
                                                    @item.Count
                                                </div>

                                                <button class="btn btn-primary" @onclick="()=>Increament(item.ProductId, item.ProductPriceId, 1)">
                                                    <i class="bi bi-plus-circle-fill"></i>

                                                </button>
                                                <button class="btn btn-danger ms-2" @onclick="()=>Decreament(item.ProductId, item.ProductPriceId, 0)">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            </div>
                                            <!-- Quantity -->
                                            <!-- Price -->
                                            <p class="text-start text-md-center">
                                                <strong>@item.Count x @item.ProductPirce.Price : @((item.Count) * (item.ProductPirce.Price))/-</strong>
                                            </p>
                                            <!-- Price -->
                                        </div>
                                    </div>
                                </div>
                                <hr class="p-0 m-0" />
                            }
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header py-3">
                                <h5 class="mb-0">Summary</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                                        <strong>Total Products :<span>@ShoppingCart.Count</span></strong>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                                        <strong>Order Total :<span><i class="bi bi-currency-rupee"></i>@OrderToatal/-</span></strong>
                                    </li>
                                </ul>

                                <a class="btn btn-primary mt-2" href="/summary">
                                    Proceed
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
}
@code {
    public bool IsProcessing { get; set; } = false;
    private List<ShoppingCart> ShoppingCart { get; set; } = new List<ShoppingCart>();
    private IEnumerable<ProductDTO> Products { get; set; }
    private double OrderToatal { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;

        Products = await _productService.getAll();
        await LoadCart();
        IsProcessing = false;
    }
    private async Task LoadCart()
    {
        OrderToatal = 0;
        ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
        if (ShoppingCart == null)
        {
            ShoppingCart = new List<ShoppingCart>();
        }
        else{
            foreach (var cart in ShoppingCart)
            {
                cart.Product = Products.FirstOrDefault(u => u.Id == cart.ProductId);
                cart.ProductPirce = cart.Product.ProductPrices.FirstOrDefault(u => u.Id == cart.ProductPriceId);
                OrderToatal += (cart.ProductPirce.Price * cart.Count);
            }
        }
    }

    private async Task Decreament(int prodId, int prodPriceId, int Count)
    {
        IsProcessing = true;
        await _cartService.DecreamentCart(new()
            {
                Count = Count,
                ProductId = prodId,
                ProductPriceId = prodPriceId
            });
        await LoadCart();
        IsProcessing = false;
    }
    private async Task Increament(int prodId, int prodPriceId, int Count)
    {
        IsProcessing = true;
        await _cartService.IcreamentCart(new()
            {
                Count = Count,
                ProductId = prodId,
                ProductPriceId = prodPriceId
            });
        await LoadCart();
        IsProcessing = false;
    }
}