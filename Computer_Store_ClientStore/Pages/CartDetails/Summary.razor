@page "/summary"
@using Microsoft.AspNetCore.Authorization;
@inject IJSRuntime _jsRuntime
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IOrderService _orderService
@inject IPaymentService _paymentService
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="text-center">
        <img src="/Images/loader.gif" />
    </div>
}
else
{
    <div class="container p-md-3">
        <h3>summary</h3>
        <div class="row d-flex justify-content-center my-4">
            <div class="col-md-8">
                <div class="card mb-4 border-0 border-top">
                    <div class="card-header border-top border-start border-end border-bottom-0 border-2 py-3">
                        <h5 class="mb-0">Cart - @order.OrderDetails.Count items</h5>
                    </div>
                    <div class="m-0 p-0" style="box-shadow: 5px 5px 25px #2359">
                    @foreach (var orderitem in order.OrderDetails)
                    {
                        <div class="card-body border-0 border-start border-end border-2">
                            <!-- Single item -->
                            <div class="row">
                                <div class="col-lg-3 col-md-12 mb-lg-0 text-center">
                                    <img class="img-fluid img-responsive shadow-lg" src="@orderitem.Product.ImageUrl" style="max-height:15vh;  margin: auto;">
                                </div>

                                <div class="col-lg-5 col-md-6 mb-4 mb-lg-0">
                                    <!-- Data -->
                                    <p><strong>@orderitem.Product.Name -  @orderitem.Vairent</strong></p>
                                    <p></p>
                                    <p class="badge bg-dark">Category: @orderitem.Product.Category.Name</p>
                                    <!-- Data -->
                                </div>

                                <div class="col-lg-4 col-md-6 mb-4 mb-lg-0">
                                    <!-- Quantity -->
                                        <div class="d-flex mb-2 ps-2 border-start border-4 border-warning">
                                        <div class="form-outline">
                                            <strong>@orderitem.Count x @orderitem.Price : @((orderitem.Count) * (orderitem.Price))/-</strong>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <hr class="p-0 m-0" />
                    }
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card mb-4 shadow-lg">
                    <div class="card-header py-3">
                        <h5 class="mb-0">Summary</h5>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0 border">
                                <strong>Total Products : <span>@order.OrderDetails.Count</span></strong>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0 border">
                                <strong>Order Total : <span><i class="bi bi-currency-rupee"></i>@order.OrderHeader.OrderTotal/-</span></strong>
                            </li>
                        </ul>
                        <hr>
                        <EditForm method="post" Model="order.OrderHeader" OnValidSubmit="HandleCheckout">
                            <div class="row px-2 text-warning border-bottom border-4">
                                <p class="fs-3 fw-bold m-0 ">Details</p>
                            </div>

                            <div class="form-group pt-2">
                                <label for="name">Name</label>
                                <InputText @bind-Value="order.OrderHeader.Name" type="text" class="form-control" id="name"/>
                                <ValidationMessage For="()=>order.OrderHeader.Name"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="number">Phone Number</label>
                                <InputText @bind-Value="order.OrderHeader.PhoneNumber" type="text" class="form-control" id="number"/>
                                <ValidationMessage For="()=>order.OrderHeader.PhoneNumber"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="mail">Email</label>
                                <InputText @bind-Value="order.OrderHeader.Email" type="text" class="form-control" id="mail" />
                                <ValidationMessage For="()=>order.OrderHeader.Email"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="adtype">Address Type</label>
                                <InputText @bind-Value="order.OrderHeader.AddressType" type="text" class="form-control" id="adtype"/>
                                <ValidationMessage For="()=>order.OrderHeader.AddressType"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="add">Street Address</label>
                                <InputText @bind-Value="order.OrderHeader.StreetAddress" type="text" class="form-control" id="add"/>
                                <ValidationMessage For="()=>order.OrderHeader.StreetAddress"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="state">State</label>
                                <InputText @bind-Value="order.OrderHeader.State" type="text" class="form-control" id="State" />
                                <ValidationMessage For="()=>order.OrderHeader.State"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="city">City</label>
                                <InputText @bind-Value="order.OrderHeader.City" type="text" class="form-control" id="city"/>
                                <ValidationMessage For="()=>order.OrderHeader.City"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <label for="code">Postal Code</label>
                                <InputText @bind-Value="order.OrderHeader.PostalCode" type="text" class="form-control" id="code" />
                                <ValidationMessage For="()=>order.OrderHeader.PostalCode"></ValidationMessage>
                            </div>
                            <div class="form-group pt-2">
                                <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    public bool IsProcessing { get; set; } = false;
    private IEnumerable<ProductDTO> Products { get; set; }
    private OrderDTO order { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Products = await _productService.getAll();
        List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);

        order = new()
            {
                OrderHeader = new()
                {
                    OrderTotal = 0,
                    Status = SD.Status_Pending
                },
                OrderDetails = new List<OrderDetailsDTO>()
            };
        foreach (var item in cart)
        {
            ProductDTO Product = Products.FirstOrDefault(u => u.Id == item.ProductId);
            ProductPriceDTO ProductPirce = Product.ProductPrices.FirstOrDefault(u => u.Id == item.ProductPriceId);
            OrderDetailsDTO orderDetailsDTO = new()
                {
                    ProductId = item.ProductId,
                    Vairent = ProductPirce.Varient,
                    Count = item.Count,
                    Price = ProductPirce.Price,
                    ProductName = Product.Name,
                    Product = Product
                };
            order.OrderDetails.Add(orderDetailsDTO);
            order.OrderHeader.OrderTotal += (item.Count * ProductPirce.Price);
        }
        if(await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails) != null)
        {
            var userInfo = await _localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
            order.OrderHeader.UserId = userInfo.Id;
            order.OrderHeader.Name = userInfo.Name;
            order.OrderHeader.Email = userInfo.Email;
            order.OrderHeader.PhoneNumber = userInfo.PhoneNumber;
        }

        IsProcessing = false;
    }

    protected async Task HandleCheckout()
    {
        try{
            IsProcessing = true;
            var paymentDTO = new StripePaymentDTO()
            {
                Order = order
            };
            var result = await _paymentService.Checkout(paymentDTO);
            order.OrderHeader.SessionId = result.Data.ToString();
            var OrderDTOSaved = await _orderService.Create(paymentDTO);
            await _localStorage.SetItemAsync(SD.Local_OrderDetails, OrderDTOSaved);
            await _jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch(Exception ex)
        {
            await _jsRuntime.ToastrError(ex.Message);
        }
    }
}
